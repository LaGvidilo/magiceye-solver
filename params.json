{"name":"Magiceye-solver","tagline":"A python code to automatically \"solve\" magic eye autostereograms","body":"![Alt text](http://i.imgur.com/AUmpOSr.png \"Example\" )\r\n\r\n# magiceye-solver\r\nAre you as frustrated by not being able to see those magic eye optical illusions as I am? Well, now you're in luck.\r\n\r\nThis is a  short python code that demonstrates how to automatically \"solve\" a magic eye autostereogram by estimating a \r\nprojection of the underlying image. This provides a decent contour outline of the hidden object, though most finer detail\r\ntends to be lost.\r\n\r\nRequirements:\r\n--------------\r\n\r\n- Python 2.7+\r\n- Numpy 1.5+\r\n- Scipy 0.12+\r\n\r\nOptional:\r\n\r\n- scikit-image 0.8+ (code will attempt to import filtering functions for additional post processing, but will not raise an error if \r\nlibrary is not available)\r\n\r\nExample usages:\r\n----------\r\nThis code can be used in three different ways.\r\n### Run directly, with a command line argument:\r\n\r\nRun `magic_eye_solver.py` with the filename of the image that you would like to\r\nprocess passed as an argument:\r\n\r\n```bash\r\n$ python magic_eye_solver.py \"example_images/example1.png\"\r\n```\r\nThis generates text output:\r\n```\r\nSolving image example_images/example1.png...\r\nSaving solution to example_images/example1_solution.png...\r\nSaving joined to example_images/example1_joined.png...\r\n```\r\n\r\nThis will generate `example1_solution.png` and `example1_joined.png` in the same\r\ndirectory as the original files, showing the computed solution and a side-by-side\r\ncomparison of the original image and the solution, respectively.\r\n\r\n### Run directly, without a command line argument:\r\nIf a filename is not specified, a list of png and jpg image files will be presented\r\nto the user, who will then be prompted to select from the file names shown.\r\n\r\nFor example, we run the file directly, with no argument:\r\n```bash\r\n$ python magic_eye_solver.py\r\n```\r\nSelect all example files (example1.png through example7.png) from a generated list (notice that banner.png is not \r\nselected by the user):\r\n```\r\nPlease select from the following images:\r\n========================================\r\n(selection  filename)\r\n0 example_images/banner.png\r\n1 example_images/example1.png\r\n2 example_images/example2.png\r\n3 example_images/example3.png\r\n4 example_images/example4.png\r\n5 example_images/example5.png\r\n6 example_images/example6.png\r\n7 example_images/example7.png\r\n\r\nMake selections (separate by commas): 1,2,3,4,5,6,7\r\n\r\nSolving image example_images/example1.png...\r\nSaving solution to example_images/example1_solution.png...\r\nSaving joined to example_images/example1_joined.png...\r\n\r\nSolving image example_images/example2.png...\r\nSaving solution to example_images/example2_solution.png...\r\nSaving joined to example_images/example2_joined.png...\r\n\r\nSolving image example_images/example3.png...\r\nSaving solution to example_images/example3_solution.png...\r\nSaving joined to example_images/example3_joined.png...\r\n\r\nSolving image example_images/example4.png...\r\nSaving solution to example_images/example4_solution.png...\r\nSaving joined to example_images/example4_joined.png...\r\n\r\nSolving image example_images/example5.png...\r\nSaving solution to example_images/example5_solution.png...\r\nSaving joined to example_images/example5_joined.png...\r\n\r\nSolving image example_images/example6.png...\r\nSaving solution to example_images/example6_solution.png...\r\nSaving joined to example_images/example6_joined.png...\r\n\r\nSolving image example_images/example7.png...\r\nSaving solution to example_images/example7_solution.png...\r\nSaving joined to example_images/example7_joined.png...\r\n```\r\n\r\n### Imported and used as a library:\r\nThe `solve_magiceye()` method can also be imported from `magic_eye_solver.py` and\r\nused in your own application like any other image/array processing function:\r\n\r\n```python\r\nfrom magic_eye_solver import solve_magiceye\r\nimport pylab #matplotlib plotting\r\n\r\nimage = pylab.imread(\"example_images/example1.png\") #load magiceye image\r\n\r\nsolution = solve_magiceye(image) #solve it\r\n\r\npylab.imshow(solution, cmap = pylab.cm.gray) #plot the solution\r\n\r\npylab.show() #show the plot\r\n\r\n```\r\n\r\nHow it works:\r\n-------------\r\n- For each of the R, G, and B channels of a magic eye image:\r\n    1. An autocorrelation is computed (via FFT) to find strong horizontal periodicities in the inputted image\r\n    2. The sum of all horizontal translative shifts of the image up to the peak autocorrelation\r\n    shift is computed. That is, the entire image is \"smeared\" horizontally by the distance determined in step 1.\r\n    3. An edge detection and uniform filter is applied to clean up the resulting sum and help separate the cumulated noise \r\nfrom useful objective information. \r\n- The most leptokurtotic (high in sample kurtosis) of three channels processed as above is returned as the solution\r\nthat is most likely to have the clearest 2D grayscale projection of the underlying image. \r\n\r\nNotes / todo list:\r\n---------\r\n- The post-process filtering should be improved to clean up the output a bit more. The solutions are kind of grainy.\r\n- This certainly seems to work better for some autostereogram images than others, but still seems to give generally\r\nuseful output for the test images I've been able to collect so far.\r\n- Good alternative solution methods are likely to exist, so there is still plenty of\r\nexperimentation left to do with this. \r\n- I experimented with PCA and ICA (both as pre-processing the R, G, B channels and as post-processing of the results), \r\nbut this didn't improve the results very much.\r\n\r\nExample results\r\n----------------\r\n\r\n![Alt text](http://i.imgur.com/AUmpOSr.png \"Solution 1\")\r\n\r\n![Alt text](http://i.imgur.com/77qq4xY.jpg \"Solution 2\")\r\n\r\n![Alt text](http://i.imgur.com/WZVGvkX.jpg \"Solution 3\")\r\n\r\n![Alt text](http://i.imgur.com/3H9zeCJ.jpg \"Solution 4\")\r\n\r\n![Alt text](http://i.imgur.com/Xru4K0v.jpg \"Solution 5\")\r\n\r\n![Alt text](http://i.imgur.com/fAuwqXZ.jpg \"Solution 6\")\r\n\r\n![Alt text](http://i.imgur.com/WmVzQdv.jpg \"Solution 7\")\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}